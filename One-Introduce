/*
|----------------------------------------
| @weiChen translate, BSD License
| @farwish.com
*/

最重要的一句话：
  简单的PHP并不总是够用，尽管这种情况对大多数使用者很罕见，专业的应用程序会很快把PHP带到它的性能瓶颈，在速度上或在功能上。

存在可能性的扩展：
  PHP主要在三个地方可被扩展：外部模块，内置模块，Zend引擎。
  
外部模块：
  外部模块可以在脚本运行时用dl()函数加载。这个函数通过在磁盘上加载一个共享对象使模块功能对绑定的脚本可用。
  这种方法有好处也有坏处：
   --------------------------------------------------------------------------
  | 好处                          | 坏处                                     |
  |--------------------------------------------------------------------------|
  | 外部模块不需要重新编译PHP     | 共享对象在脚本执行时每次都要加载，非常慢 |
  |--------------------------------------------------------------------------|
  | 通过外包某些功能保持PHP的大小 | 外部的额外文件使磁盘杂乱                 |
  |--------------------------------------------------------------------------|
  
  每个使用外部模块功能的脚本需要特别包含一个dl()的调用，否则需要修改php.ini的扩展标签(不总是合适的解决办法)。
  
  总结：外部模块非常适合第三方产品，很少使用的对PHP的小补充或仅仅是测试目的。
  为了快速开发额外的功能，外部模块提供了最好的结果。针对频繁的使用，更广泛的执行，和复杂的代码，弊大于利。
  第三方可能会考虑使用php.ini中的扩展标签来为PHP创建额外的外部模块。这些外部模块完全与主软件包分开，这在商业环境中是非常好用的特性。
  商业分销商能简单的运输磁盘或存档仅包含他们的附加模块，而不需要创建不允许其他模块绑定它们的固定和坚实的PHP二进制文件。
  
内置模块：
  内置模块直接编译进PHP并被每一个PHP进程携带；它们的功能对每一个正在运行的脚本来说都是即刻可用的。
  相比外部模块，内置模块有好处和坏处：
   -------------------------------------------------------------------------------------------
  | 好处                                                  | 坏处                              |
  |-------------------------------------------------------------------------------------------|
  | 不需要明确的加载模块；功能立即可用                    | 内置模块的变化需要重新编译PHP     |
  |-------------------------------------------------------------------------------------------|
  | 没有使磁盘杂乱的外部文件；什么都驻留在PHP二进制文件中 | PHP二进制文件增多并且消耗更多内存 | 
  |-------------------------------------------------------------------------------------------|

  当你有一个保持相对不变的可靠的二进制的功能库，要求比平均性能好，或者在你的站点上被许多脚本经常的使用，内置模块是最好的。
  重新编译PHP的必需很快被速度和易用的好处所补偿。然而，当需要快速的开发小的补充时，内置模块并不是最适合的。
  
  Zend引擎：
