/*
|----------------------------------------
| @weiChen translate, BSD License
| @farwish.com
*/

最重要的一句话：
  简单的PHP并不总是够用，尽管这种情况对大多数使用者很罕见，专业的应用程序会很快把PHP带到它的性能瓶颈，在速度上或在功能上。

存在可能性的扩展：
  PHP主要在三个地方可被扩展：外部模块，内置模块，Zend引擎。
  
外部模块：
  外部模块可以在脚本运行时用dl()函数加载。这个函数通过在磁盘上加载一个共享对象使模块功能对绑定的脚本可用。
  这种方法有好处也有坏处：
   --------------------------------------------------------------------------
  | 好处                          | 坏处                                     |
  |--------------------------------------------------------------------------|
  | 外部模块不需要重新编译PHP     | 共享对象在脚本执行时每次都要加载，非常慢 |
  |--------------------------------------------------------------------------|
  | 通过外包某些功能保持PHP的大小 | 外部的额外文件使磁盘杂乱                 |
  |--------------------------------------------------------------------------|
  
  每个使用外部模块功能的脚本需要特别包含一个dl()的调用，否则需要修改php.ini的扩展标签(不总是合适的解决办法)。
  
  总结：外部模块非常适合第三方产品，使用很少的对PHP的小补充或仅仅是测试目的。
  为了快速开发额外的功能，外部模块提供了最好的结果。针对频繁的使用、更广泛的执行，和复杂的代码，弊大于利。
  第三方可能会考虑使用php.ini中的扩展标签来为PHP创建额外的外部模块。这些外部模块完全与主软件包分开，这在商业环境中是非常好用的特性。
  商业分销商能简单的运输磁盘或存档仅仅包含他们的附加模块，而不需要创建不允许其他模块绑定它们的固定和坚实的PHP二进制文件。
  
内置模块：
  内置模块直接编译进PHP并被每一个PHP进程携带；它们的功能对每一个正在运行的脚本来说都是即刻可用的。
  相比外部模块，内置模块有好处和坏处：
   -------------------------------------------------------------------------------------------
  | 好处                                                  | 坏处                              |
  |-------------------------------------------------------------------------------------------|
  | 不需要明确的加载模块；功能立即可用                    | 内置模块的变化需要重新编译PHP     |
  |-------------------------------------------------------------------------------------------|
  | 没有使磁盘杂乱的外部文件；什么都驻留在PHP二进制文件中 | PHP二进制文件增多并且消耗更多内存 | 
  |-------------------------------------------------------------------------------------------|

  当你有一个保持相对不变的可靠的二进制的功能库，要求比平均性能好，或者在你的站点上被许多脚本经常的使用，内置模块是最好的。
  必须重新编译PHP的操作很快被速度和易用的好处所补偿。然而，当需要快速的开发小的补充时，内置模块并不是最适合的。
  
  Zend引擎：
    当然，扩展同样可以直接在Zend引擎中实现。这是个很好的策略当你需要改变语言行为或直接构建至语言核心的特殊功能。总的来说，不管怎样，
  修改Zend引擎应该避免。这里的改变导致与外界不兼容，并且任何人几乎永远不会适应打过补丁的Zend引擎。
  修改部分不能与主PHP源文件分开并且下次使用官方源文件库升级会覆盖。因此，这种方法通常被认为是糟糕的实践，由于它的罕见，没有包括在这里。

  源码排版：
    在我们讨论代码问题前，你应该熟悉源代码树能快速浏览PHP文件。这是实现和调试扩展必须具备的能力。
    接下来的表格描述了主要目录的内容：
     ---------------------------------------------------------------------------------------------------
    | 目录                内容                                                                          |
    |---------------------------------------------------------------------------------------------------|
    | php-src           主要的PHP源文件和主要的头文件；这里有所有PHP的API定义，宏，等等（重要）。       |
    |                   其它任何东西都在这个目录下面。                                                  |
    |---------------------------------------------------------------------------------------------------|
    | php-src/ext       动态的和内置模块的仓库；默认情况，这些是与主要源文件树融为一体的官方PHP模块。   |
    |                   从PHP4.0开始，编译这些标准扩展作为动态加载的模块是可能的（至少，是支持的）。    |
    |---------------------------------------------------------------------------------------------------|
    | php-src/main      这个目录包含主要的php宏和定义。（重要）                                         |
    |---------------------------------------------------------------------------------------------------|
    | php-src/pear      PHP扩展和应用仓库(PEAR)。这个目录包含核心PEAR文件。                             |
    |---------------------------------------------------------------------------------------------------|
    | php-src/sapi      包含针对不同服务器抽象层的代码。                                                |
    |---------------------------------------------------------------------------------------------------|
    | TSRM              Zend和PHP的"线程安全资源管理器"(TSRM)。                                         |
    |---------------------------------------------------------------------------------------------------|
    | ZendEngine2       Zend引擎文件；这里可以找到所有Zend的API定义，宏，等等（重要）。                 |
     ---------------------------------------------------------------------------------------------------
     
    讨论包含在PHP包中的所有文件超出了本章范围。然而，你应该仔细看一下下面的文件：
    
      * php-src/main/php.h, 在PHP主目录内。这个文件包含大部分PHP的宏和API定义。
      * php-src/Zend/zend.h, 在Zend主目录内。这个文件包含大部分Zend的宏和定义。
      * php-src/Zend/zend_API.h, 同样在Zend目录内，定义了Zend的API。
    
    你应该同样跟随一些这些文件的子包含；例如，和Zend执行相关的，PHP初始化文件支持，和诸如此类。阅读这些文件之后，花时间浏览一点整个包来看所有文件和模块的依赖关系 - 它们如何相互联系，特别是它们如何利用彼此。
    它同样帮你适应PHP编写的编码风格。为了扩展PHP，你应该快速适应这种风格。
    
  扩展惯例：
    Zend是利用某些约定建立；为了防止破坏标准，你应该遵循下面部分描述的规则。
    
    
      
    
    
