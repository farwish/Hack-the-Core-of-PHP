### 基础结构
  C被现代定义为一门非常低层的语言。这意味着PHP理所当然没有许多特性的内置支持，如反射，动态加载模块，边界检查，线程安全的数据管理
  和各种有用的数据结构，包括链表和哈希表。同时，C是语言支持和功能的共同点。给予足够的工作，这些概念没有不可能的；Zend引擎使用它们。
  
  许多努力被投入到使Zend API可扩展和可理解，但在经验不足的人看来是多余的和不必要的扩展上，C强制确定的必要的声明。所有那些结构，
  本节详细是在Zend Engine2和2的"write once and forget"中。这里有一些PHP5.3的ext_skel生成的 php_counter.h 和 counter.c中的摘录，
  显示了预生成的声明：
  注意：精明的读者会注意到，真实文件中有许多声明这里没有显示。那些声明具体到各样的Zend子系统并在其它合适的地方讨论。
  
  ```
  extern zend_module_entry counter_module_entry;
  #define phpext_counter_ptr &counter_module_entry

  #ifdef PHP_WIN32
  #    define PHP_COUNTER_API __declspec(dllexport)
  #elif defined(__GNUC__) && __GNUC__ >= 4
  #    define PHP_COUNTER_API __attribute__ ((visibility("default")))
  #else
  #    define PHP_COUNTER_API
  #endif

  #ifdef ZTS
  #include "TSRM.h"
  #endif
  
  ```
  ```
  #ifdef HAVE_CONFIG_H
  #include "config.h"
  #endif

  #include "php.h"
  #include "php_ini.h"
  #include "ext/standard/info.h"
  #include "php_counter.h"

  /* ... */

  #ifdef COMPILE_DL_COUNTER
  ZEND_GET_MODULE(counter)
  #endif

  ```
  
  * 包含 counter_module_entry 的行定义了一个全局变量，一个宏指针指向它，也包含提供给扩展的 zend_module_entry。
    尽管后面的讨论考虑“true”全局变量的缺点，这种用法是故意的；Zend采取预防措施来防止滥用这个变量。
  
  * PHP_COUNTER_API 定义用来给非PHP函数的想要开放给其它模块用的模块使用。
  
  * counter扩展没有定义任何东西，在最终版本的头文件中，这个宏已被移除。PHPAPI在其它地方声明，
    在标准扩展中应用使实用的phpinfo()功用函数可用于其它扩展。
  
  * 引入 TSRM.h 可以跳过，如果PHP或扩展编译时没加 thread-safety 选项；因为在那种情况下，没有使用 TSRM。

  * 一个标准的引用列表，给出了扩展自己的 php_counter.h。configure 生成的 config.h 给出确定的扩展访问。
    php.h 是整个PHP和Zend APIs的入口。php_ini.h 为运行时配置入口添加APIs。不是所有的扩展要使用它。
    最后，/ext/standard/info.h 导入上述 phpinfo() 功用API。
    
  * COMPILE_DL_COUNTER 只由 configure 定义，如果counter启用了扩展并作为一个动态加载的模块而不是静态链接到PHP中。
    ZEND_GET_MODULE 定义了一个Zend用来在运行时获取扩展的 zend_module_entry 的极小的函数。
  
  注意：偷看了 main/php_config.h 的聪明读者在尝试构建静态启用地counter扩展会注意到，同样有一个定义的 HAVE_COUNTER 常量，源代码未检查。
  有一个简单的未检测的原因：没必要。如果扩展没有启用，源文件永远不会被编译。


### zend_module结构

  PHP扩展的主要源文件含几个给C程序员的新的结构体。最重要的是，开始一个新扩展时首先接触的是 zend_module 结构体。
  这个结构体包含大量的信息来告诉Zend引擎有关扩展的依赖，版本，回调，和其它关键数据。这个结构体随着时间的推移已突变；
  这节将聚焦在从 PHP5.2 开始出现的结构体上，并识别少量在 PHP5.3 中改变的部分。
  
  counter.c 中的 zend_module 声明看起来像在任何代码写入前。例子文件由 ext_skel --extname=counter,包括移除一些过时的结构：
  
  Example #1 zend_module declaration in the counter extension
  ```
  /* {{{ counter_module_entry
   */
  zend_module_entry counter_module_entry = {
    STANDARD_MODULE_HEADER,
    "counter",
    counter_functions,
    PHP_MINIT(counter),
    PHP_MSHUTDOWN(counter),
    PHP_RINIT(counter),        /* Replace with NULL if there's nothing to do at request start */
    PHP_RSHUTDOWN(counter),    /* Replace with NULL if there's nothing to do at request end */
    PHP_MINFO(counter),
    "0.1", /* Replace with version number for your extension */
    STANDARD_MODULE_PROPERTIES
  };
  /* }}} */
  ```

  乍一看，这有点令人畏惧，但大部分非常容易理解。这是 PHP5.3 zend_modules.h 中的 zend_module 定义：
  
  Example #2 zend_module definition in PHP5.3
  ```
  struct _zend_module_entry {
    unsigned short size;
    unsigned int zend_api;
    unsigned char zend_debug;
    unsigned char zts;
    const struct _zend_ini_entry *ini_entry;
    const struct _zend_module_dep *deps;
    const char *name;
    const struct _zend_function_entry *functions;
    int (*module_startup_func)(INIT_FUNC_ARGS);
    int (*module_shutdown_func)(SHUTDOWN_FUNC_ARGS);
    int (*request_startup_func)(INIT_FUNC_ARGS);
    int (*request_shutdown_func)(SHUTDOWN_FUNC_ARGS);
    void (*info_func)(ZEND_MODULE_INFO_FUNC_ARGS);
    const char *version;
    size_t globals_size;
  #ifdef ZTS
    ts_rsrc_id* globals_id_ptr;
  #else
    void* globals_ptr;
  #endif
    void (*globals_ctor)(void *global TSRMLS_DC);
    void (*globals_dtor)(void *global TSRMLS_DC);
    int (*post_deactivate_func)(void);
    int module_started;
    unsigned char type;
    void *handle;
    int module_number;
  };
  ```
  
  这些中的许多字段永远不会被一个扩展开发者接触到。有一些标准宏自动把它们设置成合适的值。
  宏 STANDARD_MODULE_HEADER 填充所有的值直到 deps 字段。另外，宏 STANDARD_MODULE_HEADER_EX 会把 deps 字段设置为空来给开发者使用。
  开发者永远为 name 到 version 的一切富有责任。然后，宏 STANDARD_MODULE_PROPERTIES 会填充其余的结构，
  或者宏 STANDARD_MODULE_PROPERTIES_EX 可以用来把扩展的全局变量和使用后的函数字段设为非填充的。许多新式的扩展会使用模块的全局变量。
  
  注意：如果开发者完全手工填充它们，不借助任何快捷的宏，表格给出了每个字段该有的值。这并不推荐。许多字段的“正确的值”可能会改变。
  只要有可能就使用宏。
   -----------------------------------------------------------------------------------------------------------------------------
  |                                模块结构体字段的值                                                                           |
  |-----------------------------------------------------------------------------------------------------------------------------|
  | 字段                      值                              描述                                                              |
  |-----------------------------------------------------------------------------------------------------------------------------|
  | size                    sizeof(zend_module_entry)     结构体以字节为单位的大小。                                            |
  |-----------------------------------------------------------------------------------------------------------------------------|
  | zend_api                ZEND_MODULE_API_NO            这个模块编译时的Zend API版本。                                        |
  |-----------------------------------------------------------------------------------------------------------------------------|
  | zend_debug              ZEND_DEBUG                    标示模块是否在ZTS启用的情况下编译的标志。                             |
  |-----------------------------------------------------------------------------------------------------------------------------|
  | ini_entry               NULL                          这个指针由Zend在内部使用来保持模块声明的 INI 记录的本地引用。         |
  |-----------------------------------------------------------------------------------------------------------------------------|
  | deps                    NULL                          指向模块的依赖关系列表的指针。                                        |
  |-----------------------------------------------------------------------------------------------------------------------------|
  | name                    "mymodule"                    模块名称。这是简称，例如"spl"或"standard"。                           |
  |-----------------------------------------------------------------------------------------------------------------------------|
  | functions               mymodule_functions            指向模块函数表的指针，Zend用来把模块中的函数公开给用户层。            |
  |-----------------------------------------------------------------------------------------------------------------------------|
  | module_startup_func     PHP_MINIT(mymodule)           Zend在模块加载进PHP的一个特殊实例时第一次调用的回调函数。             |
  |-----------------------------------------------------------------------------------------------------------------------------|
  | module_shutdown_func    PHP_MSHUTDOWN(mymodule)       Zend在模块从PHP的一个特殊实例中卸载时调用的回调函数，通常在最后关机时.|
  |-----------------------------------------------------------------------------------------------------------------------------|
  | request_startup_func    PHP_RINT(mymodule)            Zend在每个请求之初调用的回调函数。由于调用它每个请求都有消耗，        |
  |                                                       这个应该尽可能短或为NULL。                                            |
  |-----------------------------------------------------------------------------------------------------------------------------|
  | request_shutdown_func   PHP_RSHUTDOWN(mymodule)       Zend在每个请求最后调用的回调函数。由于调用它每个请求都有消耗，        |
  |                                                       这个应该尽可能短或为NULL。                                            |
  |-----------------------------------------------------------------------------------------------------------------------------|
  | info_func               PHP_MINFO(mymodule)           Zend在phpinfo()函数调用时调用的回调函数。                             |
  |-----------------------------------------------------------------------------------------------------------------------------|
  | version                 NO_VERSION_YET                模块的版本，由开发者指定。推荐的版本号预期格式是version_compare()     |
  |                                                       (如 "1.0.5-dev")，或者一个CVS或者SVN版本号(如 "$Rev:322138 $")。      |
  |-----------------------------------------------------------------------------------------------------------------------------|
  | globals_id_ptr          &mymodule_globals_id     |    这两个只有一个可以存在，取决于 USING_ZTS 常亮是否为 TRUE。            |
  |--------------------------------------------------|    前者是一个针对模块全局变量的TSRM的分配表的索引，                      |
  | globals_ptr             &mymodule_globals        |    后面的是指向全局变量的指针。                                          |
  |-----------------------------------------------------------------------------------------------------------------------------|
  | globals_ctor            PHP_GINIT(mymodule)           函数在任何 module_startup_func 之前调用来初始化模块的全局变量。       |
  |-----------------------------------------------------------------------------------------------------------------------------|
  | globals_dtor            PHP_GSHUTDOWN(mymodule)       函数在任何 module_shutdown_func 之后调用来释放模块的全局变量。        |
  |-----------------------------------------------------------------------------------------------------------------------------|
  | post_deactivate_func    ZEND_MODULE_POST_ZEND_DEACTIVATE_N(mymodule)  函数由Zend在请求结束后调用。难得使用。                |
  |-----------------------------------------------------------------------------------------------------------------------------|
  | module_started          0                        |                                                                          |
  |--------------------------------------------------|    这些字段用于Zend内部跟踪信息。                                        |
  | type                    0                        |                                                                          |
  |--------------------------------------------------|                                                                          |
  | handle                  NULL                     |                                                                          |
  |--------------------------------------------------|                                                                          |
  | module_number           0                        |                                                                          |
   -----------------------------------------------------------------------------------------------------------------------------
  
